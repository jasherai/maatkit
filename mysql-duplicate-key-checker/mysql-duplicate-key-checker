#!/usr/bin/perl

# This is mysql-duplicate-key-checker, a program to analyze MySQL tables for
# duplicated or redundant indexes and foreign key constraints.
# 
# This program is copyright (c) 2007 Baron Schwartz, baron at xaprb dot com.
# Feedback and improvements are welcome.
#
# THIS PROGRAM IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
# MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, version 2; OR the Perl Artistic License.  On UNIX and similar
# systems, you can issue `man perlgpl' or `man perlartistic' to read these
# licenses.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA.

use strict;
use warnings FATAL => 'all';

use DBI;
use English qw(-no_match_vars);
use Getopt::Long;
use List::Util qw(max);

our $VERSION = '@VERSION@';
# $Revision$

$OUTPUT_AUTOFLUSH = 1;

# ############################################################################
# Get configuration information.
# ############################################################################

my @opt_spec = (
   { s => 'allatonce|s',    d => 'Print only once, instead of one DB at a time' },
   { s => 'allstruct|a',    d => 'Compare indexes with different structs (BTREE, HASH, etc)' },
   { s => 'databases|d=s',  d => 'Only do this comma-separated list of databases' },
   { s => 'defaults-file|F=s', d => 'Only read default options from the given file' },
   { s => 'function|f=s',   d => 'Do f=foreign keys, k=keys.  Default is do both.' },
   { s => 'help',           d => 'Show this help message' },
   { s => 'host|h=s',       d => 'Connect to host' },
   { s => 'ignoredb|g=s',   d => 'Ignore this comma-separated list of databases' },
   { s => 'ignoretbl|n=s',  d => 'Ignore this comma-separated list of tables' },
   { s => 'password|p=s',   d => 'Password to use when connecting' },
   { s => 'port|P=i',       d => 'Port number to use for connection' },
   { s => 'socket|S=s',     d => 'Socket file to use for connection' },
   { s => 'tab|b',          d => 'Output separated with tabs' },
   { s => 'tables|t=s',     d => 'Only do this comma-separated list of tables' },
   { s => 'user|u=s',       d => 'User for login if not current user' },
   { s => 'verbose|v',      d => 'Output everything, not just dupes' },
);

# This is the container for the command-line options' values to be stored in
# after processing.  Initial values are defaults.
my %opts = (
   d => '',
   g => '',
   t => '',
   n => '',
   f => 'fk',
   v => 0,
   b => 0,
   a => 0,
   s => 0,
);
# Post-process...
my %opt_seen;
foreach my $spec ( @opt_spec ) {
   my ( $long, $short ) = $spec->{s} =~ m/^([\w-]+)(?:\|([^!+=]*))?/;
   $spec->{k} = $short || $long;
   $spec->{l} = $long;
   $spec->{t} = $short;
   $spec->{n} = $spec->{s} =~ m/!/;
   $opts{$spec->{k}} = undef unless defined $opts{$spec->{k}};
   die "Duplicate option $spec->{k}" if $opt_seen{$spec->{k}}++;
}

Getopt::Long::Configure('no_ignore_case', 'bundling');
GetOptions( map { $_->{s} => \$opts{$_->{k}} } @opt_spec) or $opts{help} = 1;

# Make comma-separated lists into hashes.
if ( $opts{d} ) {
   $opts{d} = { map { $_ => 1 } split(/,\s*/, $opts{d}) };
}
$opts{g} = { map { $_ => 1 } split(/,\s*/, $opts{g}) };
if ( $opts{t} ) {
   $opts{t} = { map { $_ => 1 } split(/,\s*/, $opts{t}) };
}
$opts{n} = { map { $_ => 1 } split(/,\s*/, $opts{n}) };
if ( $opts{e} ) {
   $opts{e} = { map { lc($_) => 1 } split(/,\s*/, $opts{e}) };
}

if ( $opts{help} ) {
   print "Usage: mysql-duplicate-key-checker <options>\n\n";
   my $maxw = max(map { length($_->{l}) + ($_->{n} ? 4 : 0)} @opt_spec);
   foreach my $spec ( sort { $a->{l} cmp $b->{l} } @opt_spec ) {
      my $long  = $spec->{n} ? "[no]$spec->{l}" : $spec->{l};
      my $short = $spec->{t} ? "-$spec->{t}" : '';
      printf("  --%-${maxw}s %-4s %s\n", $long, $short, $spec->{d});
   }
   print <<USAGE;

mysql-duplicate-key-checker examines MySQL tables for duplicate or redundant
indexes and foreign keys.  Connection options are read from MySQL option files.
For more details, please read the documentation:

   perldoc mysql-duplicate-key-checker

USAGE
   exit(1);
}

# ############################################################################
# Get ready to do the main work.
# ############################################################################
my %conn = ( F => 'mysql_read_default_file', h => 'host', P => 'port', S => 'socket');

# Connect to the database
my $dsn = 'DBI:mysql:' . ( $opts{D} || '' ) . ';'
   . join(';', map  { "$conn{$_}=$opts{$_}" } grep { defined $opts{$_} } qw(F h P S))
   . ';mysql_read_default_group=mysql';
my $dbh = DBI->connect($dsn, @opts{qw(u p)}, { AutoCommit => 1, RaiseError => 1, PrintError => 1 } )
   or die("Can't connect to DB: $OS_ERROR");

my @databases = @{$dbh->selectcol_arrayref('SHOW DATABASES')};
my @whole_batch;
my $exit_code;

DATABASE:
foreach my $database ( @databases ) {

   # Ignore databases as instructed.  Also ignore INFORMATION_SCHEMA and skip
   # databases caused by lost+found directories created in the root of ext3
   # filesystems; they are not really databases.
   next DATABASE if
      ( $opts{d} && !exists($opts{d}->{$database}) )
      || $database =~ m/^(information_schema|lost\+found)$/mi
      || exists $opts{g}->{$database};

   my @tables = @{$dbh->selectcol_arrayref('SHOW TABLES FROM `' . $database .  '`')};
   next DATABASE unless @tables;

   my %info_for;

   TABLE:
   foreach my $table ( @tables ) {
      next TABLE if
         ( $opts{t} && !exists($opts{t}->{$table}) )
         || exists $opts{n}->{$table};

      $exit_code = 1;
      my $ddl;
      eval {
         $ddl = ($dbh->selectrow_array("SHOW CREATE TABLE `$database`.`$table`"))[1];
         $exit_code = 0;
      };
      next TABLE if !$ddl || $ddl =~ m/^CREATE ALGORITHM/;

      my ( $engine ) = $ddl =~ m/\) (?:ENGINE|TYPE)=(\w+)/;
      my $hash = {
         engine   => $engine,
         database => $database,
         table    => $table,
         engine   => $engine,
      };
      $hash->{keys} = $opts{f} =~ m/k/ ? [ find_keys($hash, $ddl) ] : [];
      $hash->{fks}  = $opts{f} =~ m/f/ ? [ find_fks($hash, $ddl) ]  : [];
      if ( @{$hash->{keys}} || @{$hash->{fks}} ) {
         $info_for{$table} = $hash;
      }
   }

   my @to_print;
   foreach my $table ( sort keys %info_for ) {
      my $hash = $info_for{$table};

      # Prepare indexes
      if ( $opts{f} =~ m/k/ ) {
         my @keys = sort { $a->{cols} cmp $b->{cols} } @{$hash->{keys}};
         if ( $opts{v} ) { # Print all
            push @to_print, map { make_hash($database, $table, 'KEY', $_) } @keys;
         }
         else { # Find duplicate/redundant by prefix matching.
            my %seen; # Avoid outputting a key more than once.
            foreach my $i ( 0..$#keys - 1 ) {
               my $pat = quotemeta($keys[$i]->{cols});
               foreach my $j ( $i+1..$#keys ) {
                  if ( (($keys[$i]->{struct} eq $keys[$j]->{struct}) || $opts{a})
                     && $keys[$j]->{cols} =~ m/^$pat/ )
                  {
                     push @to_print, make_hash($database, $table, 'KEY', $keys[$i]) if !$seen{$i}++;
                     push @to_print, make_hash($database, $table, 'KEY', $keys[$j]) if !$seen{$j}++;
                  }
               }
            }
         }
      }

      # Prepare foreign keys
      if ( $opts{f} =~ m/f/ ) {
         my @fks = sort { $a->{cols} cmp $b->{cols} } @{$hash->{fks}};
         if ( $opts{v} ) { # Print all
            push @to_print, map { make_hash($database, $table, 'FK', $_) } @fks;
         }
         else { # Otherwise output duplicates.  $i $j avoids backtracking.
            my %seen;
            foreach my $i ( 0..$#fks - 1 ) {
               foreach my $j ( $i+1..$#fks ) {
                  if ( $fks[$i]->{parent} eq $fks[$j]->{parent} && $fks[$i]->{cols} eq $fks[$j]->{cols} ) {
                     push @to_print, make_hash($database, $table, 'FK', $fks[$i]) if !$seen{$i}++;
                     push @to_print, make_hash($database, $table, 'FK', $fks[$j]) if !$seen{$j}++;
                  }
               }
            }
         }
      }
   }

   next DATABASE unless @to_print;

   if ( $opts{s} ) {
      push @whole_batch, @to_print;
   }
   else {
      print_batch(@to_print);
   }
}

if ( @whole_batch && $opts{s} ) {
   print_batch(@whole_batch);
}

exit($exit_code);

# ############################################################################
# Subroutines
# ############################################################################

sub print_batch {
   my ( @batch ) = @_;

   my $hdr;
   if ( $opts{b} ) {
      $hdr = ( "%s\t" x 8 ) . "\n";
   }
   else {
      my $max_idx  = max(5, map { length($_->{name}) } @batch);
      my $max_tbl  = max(5, map { length($_->{table}) } @batch);
      my $max_db   = max(8, map { length($_->{database}) } @batch);
      my $max_par  = max(6, map { length($_->{parent} || '') } @batch);
      $hdr         = "%-${max_db}s %-${max_tbl}s %-6s %-${max_idx}s %-4s %-8s %-${max_par}s %s\n";
   }

   printf($hdr, qw(DATABASE TABLE ENGINE OBJECT TYPE STRUCT PARENT COLUMNS));
   foreach my $thing ( @batch ) {
      printf($hdr, @{$thing}{qw(database table engine name type struct parent cols)});
   }

}

sub make_hash {
   my ( $database, $table, $type, $hash ) = @_;
   return {
      database => $database,
      table    => $table,
      engine   => $hash->{engine},
      name     => $hash->{name},
      type     => $type,
      struct   => $hash->{struct} || 'NULL',
      parent   => $hash->{parent} || 'NULL',
      cols     => $hash->{cols},
   };
}

# The general format of a key is
# [FOREIGN|UNIQUE|PRIMARY|FULLTEXT|SPATIAL] KEY `name` [USING BTREE|HASH] (`cols`).
sub find_keys {
   my ( $info, $ddl ) = @_;

   # Find and filter the indexes.
   my @indexes = $ddl =~ m/((?:\w+ )?KEY .+\))/mg;
   @indexes = grep { $_ !~ m/FOREIGN/ } @indexes;

   # Make allowances for HASH bugs in SHOW CREATE TABLE
   # (http://bugs.mysql.com/bug.php?id=22632).
   if ( $info->{engine} !~ m/MEMORY|HEAP/ ) {
      @indexes = map { $_ =~ s/USING HASH/USING BTREE/; $_; } @indexes;
   }

   my @keys = map {
      my ( $struct, $cols ) = $_ =~ m/(?:USING (\w+))? \((.+)\)/;
      my ( $special ) = $_ =~ m/(FULLTEXT|SPATIAL)/;
      $struct = $struct || $special || 'BTREE';
      if ( $info->{engine} =~ m/HEAP|MEMORY/i ) {
         $struct = 'HASH';
      }
      my ( $name ) = $_ =~ m/KEY `(.*?)` \(/;
      {
         engine   => $info->{engine},
         struct   => $struct,
         cols     => $cols,
         name     => $name || 'PRIMARY',
      }
   } @indexes;
   return @keys;
}

sub find_fks {
   my ( $info, $ddl ) = @_;

   my @fks = $ddl =~ m/CONSTRAINT .* FOREIGN KEY .* REFERENCES [^\)]*\)/mg;

   # A foreign key is a duplicate no matter what order the columns are in, so
   # re-order them alphabetically so they can be compared.
   my @result = map {
      my ( $name ) = $_ =~ m/CONSTRAINT `(.*?)`/;
      my ( $cols ) = $_ =~ m/\(([^\)]+)\)/;
      my ( $parent ) = $_ =~ m/REFERENCES (\S+) /;
      if ( $parent !~ m/\./ ) {
         $parent = "`$info->{database}`.$parent";
      }
      {  name   => $name,
         engine => $info->{engine},
         parent => $parent,
         cols   => join(',', sort(split(/`, `/, $cols))),
      };
   } @fks;
   return @result;
}

# ############################################################################
# Documentation
# ############################################################################

=pod

=head1 NAME

mysql-duplicate-index-checker - Find possible duplicate indexes and foreign keys on
MySQL tables.

=head1 DESCRIPTION

This program examines the output of SHOW CREATE TABLE on MySQL tables, and if
it finds indexes that a) cover the same columns as another index in the same
order, or b) cover an exact leftmost prefix of another index, it prints out
the suspicious indexes.  By default, indexes must be of the same type, so a
BTREE index is not a duplicate of a FULLTEXT index, even if they have the same
colums.  You can override this.

It also looks for duplicate foreign keys.  A duplicate foreign key covers the
same columns as another in the same table, and references the same parent
table.

If possible, it will read your .my.cnf file so you don't have to specify
username and password.

By default it scans every table in every database, and prints out every
duplicated index and foreign key.  You can specify only to check foreign keys
or indexes.  You can also tell it to check only certain databases and tables,
ignore databases and tables, and so on.

You can specify to print out every index and/or foreign key without checking
for duplicates.  This is an easy way to get a full listing, and it's pretty
fast, since SHOW CREATE TABLE is very quick.

=head1 OUTPUT

Output is to STDOUT, one line per server and table, with header lines for each
database.  I tried to make the output easy to process with awk.  For this reason
columns are always present.  If there's no value, the script prints 'NULL'.

The default is column-aligned output for human readability, but you can change
it to tab-separated.  Output is sorted by database and table.

The columns in the output are as follows.

=over

=item DATABASE

The database the table is in.

=item TABLE

The table name.

=item ENGINE

The table's storage engine.

=item OBJECT

The index or constraint's name, e.g. `tbl_ibfk_3` (the default InnoDB name for
the third foreign key on a table named tbl).

=item TYPE

'KEY' for indexes, 'FK' for foreign keys.

=item STRUCT

The type of index: BTREE, FULLTEXT, HASH etc.  By default MySQL's indexes are
BTREE in most cases.  This does not apply to foreign keys.

=item PARENT

The parent table to which the foreign key constraint refers.  This does not
apply to indexes.

=item COLUMNS

The columns included in the index or foreign key constraint.  For indexes,
this column list is output verbatim, as shown in SHOW CREATE TABLE.  For
foreign keys, the columns are ordered so string comparison can find
duplicates, since column order in a foreign key is immaterial.

=back

=head1 SYSTEM REQUIREMENTS

You need the following Perl modules: DBI and DBD::mysql.

=head1 LICENSE

This program is copyright (c) 2007 Baron Schwartz, baron at xaprb dot com.
Feedback and improvements are welcome.

THIS PROGRAM IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, version 2; OR the Perl Artistic License.  On UNIX and similar
systems, you can issue `man perlgpl' or `man perlartistic' to read these
licenses.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA  02111-1307  USA.

=head1 AUTHOR

Baron Schwartz, baron at xaprb dot com.

=cut
