#!/usr/bin/perl

use strict;
use warnings FATAL => 'all';

# http://dev.mysql.com/doc/refman/5.0/en/explain.html
# http://dev.mysql.com/doc/sakila/en/sakila.html

# ###########################################################################
# This is a combination of modules and programs in one -- a runnable module.
# http://www.perl.com/pub/a/2006/07/13/lightning-articles.html?page=last
# ###########################################################################

# ###########################################################################
# Converts text (e.g. saved output) to a "recordset" -- an array of hashrefs
# -- just like EXPLAIN does for selectall_arrayref({}).
# ###########################################################################
package ExplainParser;

sub new {
   bless {}, shift;
}

sub parse {
   my ($self, $text) = @_;
   my $started = 0;
   my $lines   = 0;
   my @cols    = ();
   my @result  = ();
   foreach my $line ( $text =~ m/^(.*)[\r\n]+/gm ) {
      $started ||= $line =~ m/^\+[+-]+$/;
      if ( $started && $line =~ m/[^+-]/ ) {
         my @vals = $line  =~ m/\| +(.*?)(?= +\|)/g;
         if ( $lines++ ) {
            my %row;
            @row{@cols} = map { $_ eq 'NULL' ? undef : $_ } @vals;
            push @result, \%row;
         }
         else { # header row
            @cols = @vals
         }
      }
   }
   return \@result;
}

# ###########################################################################
# Converts output of EXPLAIN into a human-readable tree.
# ###########################################################################
package ExplainTree;

sub new {
   bless {}, shift;
}

sub parse {
   my ( $self, $text ) = @_;
   return $self->process(ExplainParser->new->parse($text));
}

sub process {
   my ( $self, $rows ) = @_;
   return $rows;
}

# ###########################################################################
# And now for the "program".
# ###########################################################################
package main;

if ( !caller ) {
   print "hi there\n";
}

1; # Because this is a module as well as a script.
