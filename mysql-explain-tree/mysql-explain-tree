#!/usr/bin/perl

use strict;
use warnings FATAL => 'all';

# http://dev.mysql.com/doc/refman/5.0/en/explain.html
# http://dev.mysql.com/doc/sakila/en/sakila.html

# explain select film_id from sakila.film where exists(select * from
# sakila.film_actor where sakila.film.film_id = sakila.film_actor.film_id);
# explain select film_id, (select count(*) from sakila.film) as foo from
# sakila.film;
# explain select film_id from sakila.film where exists(select * from
# sakila.film_actor where sakila.film.film_id = sakila.film_actor.film_id and
# @foo is null);
# explain select film_id, (select @foo:=count(*) from sakila.film) as foo from
# sakila.film;

# ###########################################################################
# This is a combination of modules and programs in one -- a runnable module.
# http://www.perl.com/pub/a/2006/07/13/lightning-articles.html?page=last
# ###########################################################################

# ###########################################################################
# Converts text (e.g. saved output) to a "recordset" -- an array of hashrefs
# -- just like EXPLAIN does for selectall_arrayref({}).
# ###########################################################################
package ExplainParser;

sub new {
   bless {}, shift;
}

sub parse {
   my ($self, $text) = @_;
   my $started = 0;
   my $lines   = 0;
   my @cols    = ();
   my @result  = ();
   foreach my $line ( $text =~ m/^(.*)[\r\n]+/gm ) {
      $started ||= $line =~ m/^\+[+-]+$/;
      if ( $started && $line =~ m/^\| / ) {
         my @vals = $line  =~ m/\| +(.*?)(?= +\|)/g;
         if ( $lines++ ) {
            my %row;
            @row{@cols} = map { $_ eq 'NULL' ? undef : $_ } @vals;
            push @result, \%row;
         }
         else { # header row
            @cols = @vals
         }
      }
   }
   return \@result;
}

# ###########################################################################
# Converts output of EXPLAIN into a human-readable tree.
# ###########################################################################
package ExplainTree;

sub new {
   bless {}, shift;
}

sub parse {
   my ( $self, $text ) = @_;
   return $self->process(ExplainParser->new->parse($text));
}

# The main method that turns a result set into a tree.
sub process {
   my ( $self, $rows ) = @_;
   my $tree;
   foreach my $row ( @$rows ) {
      my $sub = $row->{type};
      my $node = $self->$sub($row);
      if ( $tree ) {
         $tree = {
            type => 'JOIN',
            left => $tree,
            right => $node,
         };
      }
      else {
         $tree = $node;
      }
   }
   return $tree;
}

#############################################################################
# Each method in this section corresponds to a value you will find in the 'type'
# column in EXPLAIN.
#############################################################################
sub ALL {
   my ( $self, $row ) = @_;
   return {
      type  => 'Table scan',
      rows  => $row->{rows},
      table => $self->table($row),
   };
}

sub ref {
   my ( $self, $row ) = @_;
   my $node = {
      type    => 'Index lookup',
      key     => $row->{key},
      key_len => 2,
      'ref'   => 'sakila.film.film_id',
      rows    => 2,
   };
   if ( $row->{Extra} !~ m/Using index/ ) {
      $node->{table} = $self->table($row);
   }
   return $node;
}

# ###########################################################################
# Here are some helper subroutines for the ones that correspond to values in the
# 'type' column.
# ###########################################################################
sub table {
   my ( $self, $row ) = @_;
   return {
      type          => 'Table',
      table         => $row->{table},
      possible_keys => $row->{possible_keys},
   };
}

# ###########################################################################
# And now for the "program".
# ###########################################################################
package main;

if ( !caller ) {
   print "hi there\n";
}

1; # Because this is a module as well as a script.
